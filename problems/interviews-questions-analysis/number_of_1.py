# -*- coding: utf-8 -*-
from __future__ import print_function

class Solution(object):

    def NumberOf1(self, n):
        """
        输入一个整数，输出该数中1的个数。对于问题一定要有一定的敏捷程度，比如看到整数就需要立马意识到有正整数和
        负整数，同时还存在0，在其它问题中也是一样，考虑问题不要太急，要思考全面一点。在这个题目中，题目介绍说对于
        负数，需要考虑补码形式，因此对于补码这一简单的计算机概念需要有所了解。

        原码：最高表示符号位，其余表示数值
        反码：正整数的反码就是原码，负整数的反码就是符号位保持不变，数值位全部取反
        补码：正整数的补码就是原码，负整数的补码就是符号位不变，数值位取反，最后加1（即反码的基础上加1）

        大体上说一下三种对整数的编码方式存在的原因，虽然对于人来说直接使用原码的表示方式非常直观，因为我们一下就可以
        直到最高位表示符号位，但是对于计算机来说，存在符号位的加减运算会让逻辑电路太复杂，而且我们直到对于减法来说就是
        加负数，因此计算机的所有计算都可以归结到加法计算。因此我们会发现，使用反码表示的整数二进制进行加法，就可以自然
        的实现所有的加减法，但是这个存在一个问题就是对于0有两个不同的表示，一个带符号一个不带符号。为了解决这种冲突，
        因此引进补码表示数字的方式在计算机中，这样0就表示为了00000000（假如一个字节的话），而且还会多出一个10000000
        的补码表示形式来表示-128，因此为了计算的简单性于解决0的表示冲突，计算机中使用补码表示整数。因此对于一个4个字节
        的int来说，它所能表示的范围就是[-2^31, 2^31-1]
        """
        
        pass
