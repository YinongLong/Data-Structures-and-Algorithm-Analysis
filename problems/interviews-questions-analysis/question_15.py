# -*- coding: utf-8 -*-
from __future__ import print_function

class Solution(object):

    def jumpFloorII(self, number):
        """
        在这个题目中，相比于之前的一个题目，现在青蛙可以一次性跳到任意的台阶，问对于有number级台阶的情况
        青蛙总共有多少种跳法。
        解决这个题目的时候，可以换个角度思考这个问题，因为青蛙可以跳上任意阶台阶，因此可以从青蛙的落脚次数
        来计算总共有多少种跳的方法。例如只有一次落脚次数，那么就只有C_{n-1}^{0}=1种跳法，就是直接跳上n级
        台阶，如果有两次落脚次数，那么就有C_{n-1}^{1}种跳法，如果有三次落脚次数，那么就有C_{n-1}^{2}种
        跳法，依次类推直到有n-1次落脚次数，则就有C_{n-1}^{n-2}种跳法，如果有n次落脚次数，那么就有
        C_{n-1}^{n-1}=1种跳法，因此对于有n级台阶，总共有
            C_{n-1}^{0} + C_{n-1}^{1} + ... + C_{n-1}^{n-1}=2^{n-1}

        这个组合的公式也非常好推：
        2^{n} = C_{n}^{0} + C_{n}^{1} + ... + C_{n}^{n}

        可以假设有n个位置，每个位置有两个状态，打开1或者关闭0，那么这n个位置所有可能的状态就是2*2*2...*2=2^{n}，
        而另一个角度，我们可以按照打开的个数来计算整个状态的个数，则只有0个位置打开的状态有C_{n}^{0}个，有1个位置
        打开的状态有C_{n}^{1}个，依次类推，直到有n个位置都处于打开状态。因此这两个相等。
        """
        return pow(2, number-1)
